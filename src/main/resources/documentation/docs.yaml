openapi: 3.0.3
info:
  title: Ecommerce APIrest - OpenAPI 3.1
  description: |-
    Api rest para un ecommerce
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:8080
tags:
  - name: Authentication
    description: Login y register users
  - name: Products
    description: CRUD for products
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Loggin a user
      description: Endpoint for login user to te system
      operationId: loginuser
      requestBody:
        description: Body request for login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDTO'
      responses:
        '200':
          description: Ok. Successful login
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthResDTO'
                example:
                  - field: Token
                    message: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5d
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthResDTO'
                example:
                  - field: Error 1
                    message: Message error 1
                  - field: Error 2
                    message: Message error 2
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Register a new user to the system
      operationId: registerUser
      requestBody:
        description: Body request register user
        required: true
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/UserPostReqDTO'
      responses:
        '201':
          description: Created. User registered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/AuthResDTO'
                example:
                  - field: Ok.
                    message: "User registered"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/AuthResDTO'
                example:
                  - field: Error 1
                    message: Message error 1
                  - field: Error 2
                    message: Message error 2
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '409':
          description: Conflict. User already exists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/AuthResDTO'
                example:
                  - field: error
                    message: Usser already exists
  /products/create:
    post:
      tags:
        - Products
      summary: CRUD products
      operationId: postProduct
      requestBody:
        description: Body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPostReqDTO'
      responses:
        '201':
          description: Created. product Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInfoDTO'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      operationId: getAllProducts
      responses:
        '200':
          description: OK. Return all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components/ProductInfoDTO.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get product by product product id
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: Id of the product to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK. Return the produc found
          content:
            application/json:
              schema:
                $ref: './components/ProductInfoDTO.yaml'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
  /products/delete/{productId}:
    delete:
      tags:
       - Products
      summary: Delete product by product Id
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: Id of the produce to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK. Product deleted
          content:
            application/json:
              schema:
                type: string
                example: Deleted
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /products/edit:
    put:
      tags:
        - Products
      summary: Edit a product by id
      operationId: editProduct
      requestBody:
        description: body
        required: true
        content:
          application/json:
            schema:
              $ref: './components/ProductEditReqDTO.yaml'
      responses:
        '200':
          description: OK. Product successfuly edited
          content:
            application/json:
              schema:
                $ref: './components/ProductInfoDTO.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
  /products/low-stock/{stock}:
    get:
      tags:
        - Products
      summary: Get product with low stock
      operationId: lowStockProducts
      parameters:
        - name: stock
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK. Products found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInfoDTO' 
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /clients:
    get:
      tags:
        - Clients
      summary: Return all Clients
      operationId: getAllClients
      responses:
        '200':
          description: OK. Return all Clients
          content:
            application/json:
              schema:
                $ref: './components/UserPersonalInfoDTO.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /clients/{userId}:
    get:
      tags:
        - Clients
      summary: Get user by Id
      operationId: getUserByid
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK. User found
          content:
            application/json:
              schema:
                $ref: './components/UserPersonalInfoDTO.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          description: Not Found. User not found
          content:
            application/json:
              schema:
                type: string
                example: User not found
  /clients/delete/{userId}:
    delete:
      tags:
        - Clients
      summary: Delete client by Id
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK. User deleted
          content:
            application/json:
              schema:
                type: string
                example: Deleted
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /clients/edit:
    put:
      tags:
        - Clients
      summary: Edit a existing user
      operationId: EditUserById
      requestBody:
        description: Request body
        required: true
        content:
          application/json:
            schema:
              $ref: './components/UserEditReqDTO.yaml'
      responses:
        '200':
          description: OK. User edited
          content:
            application/json:
              schema:
                $ref: './components/UserPersonalInfoDTO.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
  /sales:
    get:
      tags:
        - Sales
      summary: ENdpoint for get all Sales
      operationId: getAllSales
      responses:
        '200':
          description: OK. Return all sales
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components/SaleInfoDTO.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /sales/create:
    post:
      tags:
        - Sales
      summary: Create a new sale
      operationId: postSale
      requestBody:
        description: Request
        required: true
        content:
          application/json:
            schema:
              $ref: './components/SalePostReqDTO.yaml'
      responses:
        '200':
          description: OK. sale created
          content:
            application/json:
              schema:
                $ref: './components/SaleInfoDTO.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'            
        '404':
          $ref: '#/components/responses/404NotFound'
  /sales/id/{saleId}:
    get:
      tags:
        - Sales
      summary: Get sale by id
      operationId: getSaleById
      parameters:
        - name: saleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK. Sale found
          content:
            application/json:
              schema:
                $ref: './components/SaleInfoDTO.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          description: Not Found. User not found
          content:
            application/json:
              schema:
                type: string
                example: User not found
  /sales/delete/{saleId}:
    delete:
      tags:
        - Sales
      summary: Delete sale
      operationId: delteSaleById
      parameters:
        - name: saleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK. Sale deleted
          content:
            application/json:
              schema:
                type: string
                example: Sale deleted
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /sales/products/{saleId}:
    get:
      tags:
        - Sales
      summary: Get products of a sale
      operationId: getProductsBySaleId
      parameters:
        - name: saleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK. Products returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components/ProductInfoDTO.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /sales/date/{saleDate}:
    get:
      tags:
        - Sales
      summary: Get sales by date
      operationId: getSalesByDate
      parameters:
        - name: saleDate
          in: path
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK. sales found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components/SaleInfoByDateDTO.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /sales/max:
    get:
      tags:
        - Sales
      summary: Get max sale
      operationId: getMaxSale
      responses:
        '200':
          description: OK. max sale
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components/SaleMaxAmountDTO.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /cart/products:
    get:
      tags:
        - Cart
      summary: Get cart of a user
      operationId: getUserCart
      responses:
        '200':
          description: OK. Return the cart
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components/ProductInfoDTO.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
  /cart/add:
    post:
      tags:
        - Cart
      summary: Add a product to the cart
      operationId: postProductToCart
      requestBody:
        description: body
        required: true
        content:
          application/json:
            schema:
              $ref: './components/AddProductToCartDTO.yaml'
      responses:
        '200':
          description: OK. Product added
          content:
            application/json:
              schema:
                $ref: './components/CartProduct.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
  /cart/remove/{cartProductId}:
    delete:
      tags:
        - Cart
      summary: Delete product fromn cart
      operationId: delteProductCartById
      parameters:
        - name: cartProductId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK. Product found and deleted from cart
          content:
            application/json:
              schema:
                type: string
                example: Product deleted from cart
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
  /cart/update:
    put:
      tags:
        - Cart
      summary: Update a product from cart
      operationId: updateProductFromCart
      requestBody:
        description: body
        required: true
        content:
          application/json:
            schema:
              $ref: './components/UpdateQuantityDTO.yaml'
      responses:
        '200':
          description: OK. Product updated
          content:
            application/json:
              schema:
                $ref: './components/CartProduct.yaml'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'

components:
  schemas:
    LoginDTO:
      $ref: './components/LoginResDTO.yaml'
    UserPostReqDTO:
      $ref: './components/UserPostReqDTO.yaml'
    ListAuthResDTO:
      type: array
      items:
        $ref: '#components/schemas/AuthResDTO'
    AuthResDTO:
      $ref: './components/AuthResDTO.yaml'
    ProductPostReqDTO:
      $ref: './components/ProductPostReqDTO.yaml'
    ProductInfoDTO:
      $ref: './components/ProductInfoDTO.yaml'
  responses:
    400BadRequest:
      description: Bad request
    401Unauthorized:
      description: Unauthorized
    404NotFound:
      description: Not found
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

          